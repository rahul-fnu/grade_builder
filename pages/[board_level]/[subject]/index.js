import Head from 'next/head'
import styles from '../../../styles/Subject.module.css'
import { useRouter } from 'next/router'
import QuestionCard from './question_card';
import { Component } from 'react';
import GridList from 'material-ui/GridList';


// example page: http://localhost:3000/caie-a-level/physics
export class SubjectPage extends Component {
    constructor(props) {
        super(props)
        this.questions = this.props.qs
        this.questionList = <Component></Component>
    }

    sortQuestions = (type) => {
        this.questions = this.props.qs.sort((a, b) => {
            if (a[type] > b[type]) {
                return 1;
            } else if (a[type] < b[type]) {
                return -1;
            } else {
                return 0;
            }
        });

        this.setState({state: this.state})  // This line forces React to rerender the page
    }

    render() {
        
        this.questionList = !this.questions ? 
            <h2>No questions found</h2> : 
            this.questions.map(question => {
                return <a href={`/question/${question._id}`}>
                    <QuestionCard q={question} key={question._id} />
                </a>
            })

        /*
        // WIP
        this.questionSplit = {}
        for (let i = 0; i < this.questions.length; ++i) {
            for (topic of this.questions[i].topics) {
                if (this.questionSplit[this.questions[i].topics]) {
                    // WIP
                }
            }
        } 
        */

        return (
            <div className={styles.container}>
                <Head>
                    <title>{`${this.props.blevel} ${this.props.sname}`}</title>
                    <meta name='description' content='Generated by Saif the human' />
                    <link rel='icon' href='/favicon.ico' />
                    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous"></link>
                </Head>
                <main className={styles.main}>
                    <h1 className={styles.title}>Subject page</h1>
                    <br />
                    {/* <span>
                        Sort by:&nbsp;
                        <button onClick={() => this.sortQuestions("date")}>Date</button>
                        <button onClick={() => this.sortQuestions("subject")}>Subject</button>
                        <button onClick={() => this.sortQuestions("difficulty")}>Difficulty</button>
                        <button onClick={() => this.sortQuestions("question_number")}>Question Number</button>
                    </span> */}
                    <div class="container">
                        <div class="row">
                            <div class="col-sm">
                                <strong>Physical quantities and units</strong>
                                {this.questions}
                            </div>
                            <div class="col-sm">
                                {this.questionList.slice(3, 4)}
                            </div>
                            <div class="col-sm">
                                {this.questionList.slice(4, 6)}
                            </div>
                        </div>
                    </div>
                </main>
            </div>
        );
    }
}

export default function Subject({ questions }) {
    const router = useRouter();
    const { subject_name, board_level } = router.query;
    return <SubjectPage blevel={board_level} sname={subject_name} qs={questions} />
}

Subject.getInitialProps = async (ctx) => {
    const query = querify(ctx.query);

    const res = await fetch(`http://${ctx.req.headers.host}/api/questions?${query}`);
    const questions = (await res.json()).data

    return {
        questions: (questions ? questions : [])
    }
}

/**
 * The following is a function that converts the arguments passed through
 * the next js dynamic path generator into a proper http query. This is
 * made mainly for interacting with the database api
 */
export function querify(stuff) {
    if (stuff.params) {
        stuff.params.forEach(e => {
            if (Number(e)) {
                stuff.component_region = e;
            } else if (/\d+/.test(e)) {
                stuff.exam_period = e;
            } else {
                if (!stuff.topics) {
                    stuff.topics = [];
                }
                stuff.topics.push(e);
            }
        });
        delete stuff.params;
    }


    var esc = encodeURIComponent;
    var query = Object.keys(stuff)
        .map(k => esc(k) + '=' + esc(stuff[k]))
        .join('&');

    return query;
}